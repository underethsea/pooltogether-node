const ethers = require("ethers");
const { ABI } = require("./abi.js");
const { ADDRESS, ADDRESS_AUCTION } = require("./address.js");
const { PROVIDERS, MAINNETSIGNER, SIGNER } = require("./providers.js");
const { CONFIG } = require("./config.js");

const CONTRACTS = {
/*  WINBOOSTERSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].WINBOOSTER,
      ABI.WINBOOSTER,
      SIGNER
    ),
  },
  WINBOOSTER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].WINBOOSTER,
      ABI.WINBOOSTER,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
  WINBOOSTSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].WINBOOST,
      ABI.WINBOOST,
      SIGNER
    ),
  },
  WINBOOST: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].WINBOOST,
      ABI.WINBOOST,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
  // mainnet

  */

/*
UNIFLASHLIQUIDATORSIGNER: {
[CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].UNIFLASHLIQUIDATOR,
      ABI.UNIFLASHLIQUIDATOR,
      SIGNER
    ),
},
  SWAPPERSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].SWAPPER,
      ABI.SWAPPER,
      SIGNER
    ),
  },
*/

  /*  GAS: {
  [CONFIG.CHAINNAME]: new ethers.Contract(
   ADDRESS[CONFIG.CHAINNAME].GAS,
   ABI.OPGAS,
   PROVIDERS[CONFIG.CHAINNAME]
   ),
},*/
 GASORACLE: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].GASORACLE,
      ABI.GASORACLE,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
 CLAIMERSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].CLAIMER,
      ABI.CLAIMER,
      SIGNER
    ),
  },
  CLAIMER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].CLAIMER,
      ABI.CLAIMER,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
  VAULTS: {
    [CONFIG.CHAINNAME]: ADDRESS[CONFIG.CHAINNAME].VAULTS.map((vault) => ({
  /*    LIQUIDATIONPAIR: new ethers.Contract(
        vault.LIQUIDATIONPAIR,
        ABI.LIQUIDATIONPAIR,
        PROVIDERS[CONFIG.CHAINNAME]
      ),*/
      VAULT: new ethers.Contract(
        vault.VAULT,
        ABI.VAULT,
        PROVIDERS[CONFIG.CHAINNAME]
      ),
    })),
  },
  LIQUIDATIONROUTER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].LIQUIDATIONROUTER,
      ABI.LIQUIDATIONROUTER,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
/*  LIQUIDATIONPAIRFACTORY: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].LIQUIDATIONPAIRFACTORY,
      ABI.LIQUIDATIONPAIRFACTORY,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
*/
PRIZETOKEN: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].PRIZETOKEN.ADDRESS,
      ABI.ERC20,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
  /*POOL: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].PRIZETOKEN.ADDRESS,
      ABI.POOL,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },*/
/*  TOKENFAUCET: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].TOKENFAUCET,
      ABI.TOKENFAUCET,
      SIGNER
    ),
  },*/
  PRIZEPOOL: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].PRIZEPOOL,
      ABI.PRIZEPOOL,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },

  RNG: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].RNG,
      ABI.RNG,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
 DRAWMANAGER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].DRAWMANAGER,
      ABI.DRAWMANAGER,
      PROVIDERS[CONFIG.CHAINNAME]
    ),
  },
 RNGWITHSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].RNG,
      ABI.RNG,
      SIGNER
    ),
  },
 DRAWMANAGERWITHSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].DRAWMANAGER,
      ABI.DRAWMANAGER,
      SIGNER
    ),
  },
/*
  RNGAUCTION: {
    MAINNET: new ethers.Contract(
      ADDRESS_AUCTION.MAINNET.RNGAUCTION,
      ABI.RNGAUCTION,
      PROVIDERS["MAINNET"]
    ),
  },
  CHAINLINKDIRECTAUCTIONHELPER: {
    MAINNET: new ethers.Contract(
      ADDRESS_AUCTION.MAINNET.CHAINLINKDIRECTAUCTIONHELPER,
      ABI.CHAINLINKDIRECTAUCTIONHELPER,
      PROVIDERS["MAINNET"]
    ),
  },
  CHAINLINKDIRECTAUCTIONHELPERWITHSIGNER: {
    MAINNET: new ethers.Contract(
      ADDRESS_AUCTION.MAINNET.CHAINLINKDIRECTAUCTIONHELPER,
      ABI.CHAINLINKDIRECTAUCTIONHELPER,
      MAINNETSIGNER
    ),
  },

  RNGAUCTIONRELAYWITHSIGNER: {
    MAINNET: new ethers.Contract(
      ADDRESS_AUCTION.MAINNET.RNGAUCTIONRELAY,
      ABI.RNGAUCTIONRELAY,
      MAINNETSIGNER
    ),
  },
*/
  PRIZEPOOLWITHSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].PRIZEPOOL,
      ABI.PRIZEPOOL,
      SIGNER
    ),
  },

PRIZETOKENWITHSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].PRIZETOKEN.ADDRESS,
      ABI.ERC20,
      SIGNER
    ),
  },
  /*POOLWITHSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].PRIZETOKEN.ADDRESS,
      ABI.POOL,
      SIGNER
    ),
  },*/
  LIQUIDATIONROUTERSIGNER: {
    [CONFIG.CHAINNAME]: new ethers.Contract(
      ADDRESS[CONFIG.CHAINNAME].LIQUIDATIONROUTER,
      ABI.LIQUIDATIONROUTER,
      SIGNER
    ),
  },
};

module.exports = { CONTRACTS };
